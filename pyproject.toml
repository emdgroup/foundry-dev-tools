[build-system]
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5"]
build-backend = "setuptools.build_meta"

[project]
name = "foundry-dev-tools"
readme = "README.md"
description = "Seamlessly run your Palantir Foundry Repository transforms code on your local machine."
requires-python = ">=3.8,<4"
authors = [
  { name = "Nicolas Renkamp", email = "nicolas.renkamp@merckgroup.com" },
  { name = "Jonas Wunderlich", email = "jonas.wunderlich@merckgroup.com" },
]
license = { text = "Apache-2.0" }
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Intended Audience :: Developers",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
  "pyarrow",
  "pandas",
  "requests",
  "fs",
  "backoff",
  "palantir-oauth-client",
]
dynamic = ["version"]

[project.entry-points."fsspec.specs"]
foundry = "foundry_dev_tools.fsspec_impl.FoundryFileSystem"

[project.optional-dependencies]
integration = ["dask", "fastparquet"]
testing = [
  "pytest",
  "pytest-mock",
  "pytest-spark",
  "requests-mock",
  "fsspec",
  "timeflake",
]
transforms = ["pyspark>=3.0.0"]

[project.urls]
Homepage = "https://emdgroup.github.io/foundry-dev-tools"
Documentation = "https://emdgroup.github.io/foundry-dev-tools"
Source = "https://github.com/emdgroup/foundry-dev-tools"
Tracker = "https://github.com/emdgroup/foundry-dev-tools/issues"
Changelog = "https://emdgroup.github.io/foundry-dev-tools/changelog.html"

[tool.setuptools]
zip-safe = false
# packages = ["foundry-dev-tools", "transforms"]
# package-dir = "src"
platforms = ["any"]

[tool.setuptools_scm]
# For smarter version schemes and other configuration options,
# check out https://github.com/pypa/setuptools_scm
version_scheme = "post-release"

[tool.pytest.ini_options]
addopts = "--verbose"
norecursedirs = ["dist", "build", ".tox"]
testpaths = "tests"
markers = ["no_patch_conf: don't use autouse config patch fixture"]

[tool.pylint."messages control"]
disable = [
  # currently wontfix:
  "too-many-arguments",
  "too-many-locals",
  "too-few-public-methods",
  "duplicate-code",
  "no-member",
  # ruff implemented:
  "unknown-option-value",
  "anomalous-backslash-in-string",
  "assert-on-string-literal",
  "assert-on-tuple",
  "await-outside-async",
  "bad-classmethod-argument",
  "bad-docstring-quotes",
  "bad-format-string",
  "bad-format-string-key",
  "bad-str-strip-call",
  "bad-string-format-type",
  "bare-except",
  "bidirectional-unicode",
  "binary-op-exception",
  "broad-exception-caught",
  "cell-var-from-loop",
  "comparison-of-constants",
  "consider-alternative-union-syntax",
  "consider-merging-isinstance",
  "consider-ternary-expression",
  "consider-using-alias",
  "consider-using-any-or-all",
  "consider-using-dict-comprehension",
  "consider-using-generator",
  "consider-using-get",
  "consider-using-set-comprehension",
  "consider-using-sys-exit",
  "consider-using-ternary",
  "continue-in-finally",
  "dangerous-default-value",
  "docstring-first-line-empty",
  "duplicate-except",
  "duplicate-key",
  "duplicate-string-formatting-argument",
  "else-if-used",
  "empty-docstring",
  "expression-not-assigned",
  "f-string-without-interpolation",
  "forgotten-debug-statement",
  "format-needs-mapping",
  "format-string-without-interpolation",
  "global-statement",
  "global-variable-not-assigned",
  "inconsistent-quotes",
  "inconsistent-return-statements",
  "invalid-all-format",
  "invalid-all-object",
  "invalid-character-backspace",
  "invalid-character-esc",
  "invalid-character-nul",
  "invalid-character-sub",
  "invalid-character-zero-width-space",
  "invalid-envvar-default",
  "invalid-name",
  "line-too-long",
  "literal-comparison",
  "logging-too-few-args",
  "logging-too-many-args",
  "magic-value-comparison",
  "misplaced-comparison-constant",
  "misplaced-future",
  "missing-class-docstring",
  "missing-final-newline",
  "missing-format-string-key",
  "missing-function-docstring",
  "missing-module-docstring",
  "mixed-format-string",
  "multiple-imports",
  "no-method-argument",
  "no-self-argument",
  "nonexistent-operator",
  "nonlocal-without-binding",
  "not-in-loop",
  "notimplemented-raised",
  "pointless-statement",
  "redefined-builtin",
  "return-in-init",
  "return-outside-function",
  "singleton-comparison",
  "super-with-arguments",
  "superfluous-parens",
  "syntax-error",
  "too-complex",
  "too-many-branches",
  "too-many-return-statements",
  "too-many-statements",
  "trailing-comma-tuple",
  "truncated-format-string",
  "undefined-variable",
  "ungrouped-imports",
  "unidiomatic-typecheck",
  "unnecessary-comprehension",
  "unnecessary-direct-lambda-call",
  "unnecessary-lambda-assignment",
  "unused-argument",
  "unused-format-string-argument",
  "unused-format-string-key",
  "unused-import",
  "unused-variable",
  "use-a-generator",
  "use-dict-literal",
  "use-list-literal",
  "used-prior-global-declaration",
  "useless-else-on-loop",
  "useless-import-alias",
  "useless-object-inheritance",
  "useless-return",
  "wildcard-import",
  "wrong-import-order",
  "wrong-import-position",
  "yield-outside-function",
]

[tool.pylint.BASIC]
good-names = ["fs", "i", "j"]

[tool.pylint.FORMAT]
max-line-length = 120

[tool.ruff]
select = [
  "E",
  "F",
  "W",
  "PL",
  "D",
  "UP",
  "B",
  "S",
  "RUF",
  "A",
  "C4",
  "ICN",
  "PT",
  "RET",
  "SIM",
  "PTH",
  "ERA",
  "TCH",
  "I",
]
line-length = 120
ignore = ["PLR0913", "D104", "D105", "D107", "B028"]
unfixable = ["ERA"] # don't delete commented out code automatically
src = ["src"]
exclude = ["docs"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "S101",
  "S311",
  "D",
  "S608",
] # assert, non crypto random and potential sql injection is okay in unit tests and not using docstrings in tests

[tool.ruff.pydocstyle]
convention = "google"
